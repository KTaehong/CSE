import numpy as np
import cv2


# Utility functions
def compute_slope(line):
    x1, y1, x2, y2 = line
    return (y2 - y1) / (x2 - x1) if (x2 - x1) != 0 else float('inf')


def compute_length(line):
    x1, y1, x2, y2 = line
    return np.sqrt((y2 - y1)**2 + (x2 - x1)**2)


def parallel(line1, line2, slope_thresh=100):
    slope1 = compute_slope(line1)
    slope2 = compute_slope(line2)
    return abs(slope1 - slope2) < slope_thresh


def close(line1, line2, distance_thresh=50):
    x1, y1, x2, y2 = line1
    x3, y3, x4, y4 = line2
    dist1 = np.sqrt((x1 - x3)**2 + (y1 - y3)**2)
    dist2 = np.sqrt((x2 - x4)**2 + (y2 - y4)**2)
    return min(dist1, dist2) < distance_thresh


# Merge similar lines
def merge_similar_lines(lines, slope_thresh=1, distance_thresh=50):
    merged = []
    used = [False] * len(lines)
   
    for i in range(len(lines)):
        if used[i]:
            continue
       
        x1, y1, x2, y2 = lines[i][0]
        avg_x1, avg_y1, avg_x2, avg_y2 = x1, y1, x2, y2
        count = 1
       
        for j in range(i + 1, len(lines)):
            if used[j]:
                continue
           
            if parallel(lines[i][0], lines[j][0], slope_thresh) and close(lines[i][0], lines[j][0], distance_thresh):
                x3, y3, x4, y4 = lines[j][0]
                avg_x1 += x3
                avg_y1 += y3
                avg_x2 += x4
                avg_y2 += y4
                count += 1
                used[j] = True
       
        avg_x1 //= count
        avg_y1 //= count
        avg_x2 //= count
        avg_y2 //= count
       
        merged.append([[avg_x1, avg_y1, avg_x2, avg_y2]])
        used[i] = True
   
    return merged


# Find unique pairs of parallel lines
def find_parallel_lines(lines):
    parallel_pairs = []
    used_pairs = set()
   
    for i in range(len(lines)):
        for j in range(i + 1, len(lines)):
            line1 = lines[i][0]
            line2 = lines[j][0]
           
            if parallel(line1, line2) and close(line1, line2):
                pair = tuple(sorted((tuple(line1), tuple(line2))))
                if pair not in used_pairs:
                    parallel_pairs.append((line1, line2))
                    used_pairs.add(pair)
                   
    return parallel_pairs

# Draw a centerline dynamically based on detected lines or fallback to image center
def draw_centerline(frame, line_pairs):
    h, w = frame.shape[:2]


    if line_pairs:
        # Average the midpoints of the parallel line pairs
        midpoints = []
        for (x1, y1, x2, y2), (x3, y3, x4, y4) in line_pairs:
            midpoint_x1 = (x1 + x3) // 2
            midpoint_y1 = (y1 + y3) // 2
            midpoint_x2 = (x2 + x4) // 2
            midpoint_y2 = (y2 + y4) // 2
            midpoints.append(((midpoint_x1, midpoint_y1), (midpoint_x2, midpoint_y2)))


        # Average all midpoints to find the centerline
        avg_x1 = sum(p1[0] for p1, p2 in midpoints) // len(midpoints)
        avg_y1 = sum(p1[1] for p1, p2 in midpoints) // len(midpoints)
        avg_x2 = sum(p2[0] for p1, p2 in midpoints) // len(midpoints)
        avg_y2 = sum(p2[1] for p1, p2 in midpoints) // len(midpoints)


        # Draw the dynamic centerline
        cv2.line(frame, (avg_x1, avg_y1), (avg_x2, avg_y2), (255, 0, 0), 10)




# Draw lines
def draw_the_lines(img, lines):
    img = np.copy(img)
    blank_image = np.zeros((img.shape[0], img.shape[1], 3), dtype=np.uint8)
    for line in lines:
        for x1, y1, x2, y2 in line:
            cv2.line(blank_image, (x1, y1), (x2, y2), (0, 255, 0), 10)
    img = cv2.addWeighted(img, 1, blank_image, 1, 0.0)
    return img


# Region Selection
def region_selection(image):
    mask = np.ones_like(image) * 255
    return cv2.bitwise_and(image, mask)


# Hough Transform
def hough_transform(image):
    rho = cv2.HOUGH_PROBABILISTIC
    theta = np.pi / 180
    threshold = 30
    minLineLength = 10
    maxLineGap = 15
    return cv2.HoughLinesP(image, rho=rho, theta=theta, threshold=threshold,
                           minLineLength=minLineLength, maxLineGap=maxLineGap)

def filter(img):
	gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
	gray = cv2.GaussianBlur(gray,(5,5),0)
	gray = cv2.medianBlur(gray,5)
	#gray = cv2.adaptiveThreshold(gray,255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,3.5)
	return gray



#Frame Processor
def frame_processor(image):
    edges = filter(image)

    #lines = hough_transform(edges)
    lines = None
    if lines is not None:
        for x in range(0,len(lines)):
            for x1,y1,x2,y2 in lines[x]:
                pts = np.array([[x1, y1 ], [x2 , y2]], np.int32)
                cv2.polylines(image, [pts], True, (0,255,0),10)
    _,thresh = cv2.threshold(edges,127,255,cv2.THRESH_BINARY)
    contours,_ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    contour = max(contours, key=cv2.contourArea)
    for point in contour:
        x, y = point[0]
        cv2.circle(image, (x, y), 2, (0, 0, 255), -1)
    return image

img = cv2.imread('Dylan.jpg')
(h, w) = img.shape[:2]
new_width = 800
aspect_ratio = h / w
new_height = int(new_width * aspect_ratio)
img = cv2.resize(img, (new_width, new_height))


# Display results
processed_img = frame_processor(img)
cv2.imshow('Lane Detection', processed_img)
cv2.imshow('gray',filter(img))

cv2.waitKey(0)
cv2.destroyAllWindows()


